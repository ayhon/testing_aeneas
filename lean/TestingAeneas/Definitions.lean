-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [testing_aeneas]
import Aeneas
open Aeneas.Std
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace testing_aeneas

/- [testing_aeneas::Tree]
   Source: 'src/lib.rs', lines 1:0-4:1 -/
inductive Tree (T : Type) where
| Leaf : T → Tree T
| Branch : Tree T → Tree T → Tree T

/- [testing_aeneas::{testing_aeneas::Tree<T>}::branch]:
   Source: 'src/lib.rs', lines 7:4-13:5 -/
def Tree.branch
  {T : Type} (left : Tree T) (right : Tree T) : Result (Tree T) :=
  Result.ok (Tree.Branch left right)

/- [testing_aeneas::{testing_aeneas::Tree<T>}::rev]:
   Source: 'src/lib.rs', lines 15:4-20:5 -/
divergent def Tree.rev {T : Type} (self : Tree T) : Result (Tree T) :=
  match self with
  | Tree.Leaf _ => Result.ok self
  | Tree.Branch left right =>
    do
    let t ← Tree.rev right
    let t1 ← Tree.rev left
    Tree.branch t t1

/- [testing_aeneas::{testing_aeneas::Tree<T>}::lenght]:
   Source: 'src/lib.rs', lines 22:4-27:5 -/
divergent def Tree.lenght {T : Type} (self : Tree T) : Result Usize :=
  match self with
  | Tree.Leaf _ => Result.ok 1#usize
  | Tree.Branch left right =>
    do
    let i ← Tree.lenght left
    let i1 ← 1#usize + i
    let i2 ← Tree.lenght right
    i1 + i2

/- [testing_aeneas::BinTree]
   Source: 'src/lib.rs', lines 30:0-37:1 -/
inductive BinTree (T : Type) where
| Nil : BinTree T
| Node : T → BinTree T → BinTree T → BinTree T

/- [testing_aeneas::{testing_aeneas::BinTree<T>}#1::nil]:
   Source: 'src/lib.rs', lines 41:4-41:49 -/
def BinTree.nil (T : Type) : Result (BinTree T) :=
  Result.ok BinTree.Nil

/- [testing_aeneas::{testing_aeneas::BinTree<T>}#1::insert]:
   Source: 'src/lib.rs', lines 42:4-52:5 -/
divergent def BinTree.insert
  {T : Type} (self : BinTree T) (value : T) : Result (BinTree T) :=
  match self with
  | BinTree.Nil =>
    do
    let bt ← BinTree.nil T
    let bt1 ← BinTree.nil T
    Result.ok (BinTree.Node value bt bt1)
  | BinTree.Node t bt right =>
    do
    let right1 ← BinTree.insert right value
    Result.ok (BinTree.Node t bt right1)

/- [testing_aeneas::{testing_aeneas::BinTree<T>}#1::size]:
   Source: 'src/lib.rs', lines 53:4-58:5 -/
divergent def BinTree.size {T : Type} (self : BinTree T) : Result U32 :=
  match self with
  | BinTree.Nil => Result.ok 0#u32
  | BinTree.Node _ left right =>
    do
    let i ← BinTree.size left
    let i1 ← 1#u32 + i
    let i2 ← BinTree.size right
    i1 + i2

end testing_aeneas
