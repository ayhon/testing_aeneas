-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [testing_aeneas]
import Aeneas
open Aeneas.Std
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace testing_aeneas

/- [testing_aeneas::Tree]
   Source: 'src/lib.rs', lines 1:0-4:1 -/
inductive Tree (T : Type) where
| Leaf : T → Tree T
| Branch : Tree T → Tree T → Tree T

/- [testing_aeneas::{testing_aeneas::Tree<T>}::branch]:
   Source: 'src/lib.rs', lines 7:4-13:5 -/
def Tree.branch
  {T : Type} (left : Tree T) (right : Tree T) : Result (Tree T) :=
  Result.ok (Tree.Branch left right)

/- [testing_aeneas::{testing_aeneas::Tree<T>}::rev]:
   Source: 'src/lib.rs', lines 15:4-20:5 -/
divergent def Tree.rev {T : Type} (self : Tree T) : Result (Tree T) :=
  match self with
  | Tree.Leaf _ => Result.ok self
  | Tree.Branch left right =>
    do
    let t ← Tree.rev right
    let t1 ← Tree.rev left
    Tree.branch t t1

/- [testing_aeneas::{testing_aeneas::Tree<T>}::lenght]:
   Source: 'src/lib.rs', lines 22:4-27:5 -/
divergent def Tree.lenght {T : Type} (self : Tree T) : Result Usize :=
  match self with
  | Tree.Leaf _ => Result.ok 1#usize
  | Tree.Branch left right =>
    do
    let i ← Tree.lenght left
    let i1 ← 1#usize + i
    let i2 ← Tree.lenght right
    i1 + i2

end testing_aeneas
